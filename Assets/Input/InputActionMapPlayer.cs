//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/InputActionMapPlayer.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionMapPlayer: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionMapPlayer()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionMapPlayer"",
    ""maps"": [
        {
            ""name"": ""IngameUI"",
            ""id"": ""6aabb1a5-fc87-4617-8421-d30ed50600c8"",
            ""actions"": [
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""c4f62860-8863-4c83-ba83-574d97f188a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BuildingMenu"",
                    ""type"": ""Button"",
                    ""id"": ""3eca3e66-9688-43c6-9c7e-837158b178d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TalentMenu"",
                    ""type"": ""Button"",
                    ""id"": ""0da703d5-d7ed-471e-a976-39252f2837f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateBuilding"",
                    ""type"": ""Button"",
                    ""id"": ""f707a980-57a6-49b7-a3a3-df34be3ea64a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaceBuilding"",
                    ""type"": ""Button"",
                    ""id"": ""a7c7b37e-248f-428d-81f2-30606fc8210f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""26970366-dec9-4607-ae91-49223ce8563f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""52123aa6-fb2f-439e-af9a-bfe517bec703"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca209789-6caf-4bc8-a4f8-bab9150a478d"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuildingMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec9c248a-b53e-4d6c-af8d-765571fbd4d9"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateBuilding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9398317-1fe3-4966-b6da-4130546ba06d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceBuilding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f525c196-ac09-46b1-a1af-2a8f524b8f18"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a25425f5-261e-436a-bdf9-98f77748dac0"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TalentMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""ce5eedd3-9407-414e-85ce-f873d7f54dba"",
            ""actions"": [
                {
                    ""name"": ""RotateCamera"",
                    ""type"": ""Value"",
                    ""id"": ""7838c7bd-d221-4af6-b9a4-0c17de74725a"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseMovement"",
                    ""type"": ""Value"",
                    ""id"": ""c6092a5b-aca6-41a7-a08c-27c5d9c26683"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c0361605-fa7c-406c-8927-31fee4b98b55"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b6c26cb-78bb-4e9b-98c3-c8d315993ec2"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""b8ea8e53-39d1-48f1-a501-ac69e7d1228e"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""f5b7e0cc-03f9-429e-a087-103a767b1979"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseSelectedItem"",
                    ""type"": ""Button"",
                    ""id"": ""53007ec8-1189-4aa1-802d-7415397d30f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Air Step"",
                    ""type"": ""Button"",
                    ""id"": ""cccbb044-1b93-4d38-8f3d-3c0c80ba908d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hotkey1"",
                    ""type"": ""Button"",
                    ""id"": ""3e356a9c-763b-4896-8dee-75caf6d26142"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hotkey2"",
                    ""type"": ""Button"",
                    ""id"": ""ae3cb3b9-6656-4fc1-ac62-676fc2c8ed6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hotkey3"",
                    ""type"": ""Button"",
                    ""id"": ""af3fe5ee-b300-437f-853f-ceccb57a0864"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hotkey4"",
                    ""type"": ""Button"",
                    ""id"": ""14e980ad-4f51-4974-8768-0869773c7200"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hotkey5"",
                    ""type"": ""Button"",
                    ""id"": ""ff64d25c-c222-4b91-9afa-89789341ad55"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hotkey6"",
                    ""type"": ""Button"",
                    ""id"": ""88033817-73aa-46ca-bf1e-f92d9f925f8c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hotkey7"",
                    ""type"": ""Button"",
                    ""id"": ""9346206e-2d13-45e5-a268-520a63155f2d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill1"",
                    ""type"": ""Button"",
                    ""id"": ""1de400fb-16dc-4c05-b4f2-28ee03bd1a46"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill2"",
                    ""type"": ""Button"",
                    ""id"": ""48e70ec9-f940-43fa-b1bf-6742b90c994a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f099b98b-f20d-4f55-9afc-b07428587862"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""996f5f08-b95b-44e0-9f5b-2a19645715fd"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Air Step"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fea6f97d-0bfd-4afb-8b75-9b8fa9359628"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hotkey1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e87f2ebe-d1ea-4dc6-9d9a-3ec75ed8873c"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hotkey2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec2b932b-43c4-4db3-b0a4-405629baf16b"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hotkey3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""adf30f40-2459-4761-aa29-a5f22003f659"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hotkey4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""821667e0-6e7c-44d4-b4c7-095dcd854ef8"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hotkey5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70c460db-5261-4d8d-bb12-9127c96b8e95"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hotkey6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e471e8a-4a5d-4bef-88e3-91b7340d828a"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hotkey7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b427833-4945-4476-bdbc-c30c22be0ab2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseSelectedItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2ce1ea3-de60-48a2-91a1-542dc520a51b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66fb7f58-897c-4c59-a967-beba3f77e86f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Debug"",
            ""id"": ""c9a8aec7-ef0e-40df-b82a-8cd7364ed53f"",
            ""actions"": [
                {
                    ""name"": ""PrintStackToConsole"",
                    ""type"": ""Button"",
                    ""id"": ""b96328ea-0aa7-4d8c-ae17-b2b2ecb07f21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""727f27fb-5da4-4605-ac87-0048b42d8b79"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrintStackToConsole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // IngameUI
        m_IngameUI = asset.FindActionMap("IngameUI", throwIfNotFound: true);
        m_IngameUI_Inventory = m_IngameUI.FindAction("Inventory", throwIfNotFound: true);
        m_IngameUI_BuildingMenu = m_IngameUI.FindAction("BuildingMenu", throwIfNotFound: true);
        m_IngameUI_TalentMenu = m_IngameUI.FindAction("TalentMenu", throwIfNotFound: true);
        m_IngameUI_RotateBuilding = m_IngameUI.FindAction("RotateBuilding", throwIfNotFound: true);
        m_IngameUI_PlaceBuilding = m_IngameUI.FindAction("PlaceBuilding", throwIfNotFound: true);
        m_IngameUI_Escape = m_IngameUI.FindAction("Escape", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_RotateCamera = m_Camera.FindAction("RotateCamera", throwIfNotFound: true);
        m_Camera_MouseMovement = m_Camera.FindAction("MouseMovement", throwIfNotFound: true);
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_UseSelectedItem = m_Player.FindAction("UseSelectedItem", throwIfNotFound: true);
        m_Player_AirStep = m_Player.FindAction("Air Step", throwIfNotFound: true);
        m_Player_Hotkey1 = m_Player.FindAction("Hotkey1", throwIfNotFound: true);
        m_Player_Hotkey2 = m_Player.FindAction("Hotkey2", throwIfNotFound: true);
        m_Player_Hotkey3 = m_Player.FindAction("Hotkey3", throwIfNotFound: true);
        m_Player_Hotkey4 = m_Player.FindAction("Hotkey4", throwIfNotFound: true);
        m_Player_Hotkey5 = m_Player.FindAction("Hotkey5", throwIfNotFound: true);
        m_Player_Hotkey6 = m_Player.FindAction("Hotkey6", throwIfNotFound: true);
        m_Player_Hotkey7 = m_Player.FindAction("Hotkey7", throwIfNotFound: true);
        m_Player_Skill1 = m_Player.FindAction("Skill1", throwIfNotFound: true);
        m_Player_Skill2 = m_Player.FindAction("Skill2", throwIfNotFound: true);
        // Debug
        m_Debug = asset.FindActionMap("Debug", throwIfNotFound: true);
        m_Debug_PrintStackToConsole = m_Debug.FindAction("PrintStackToConsole", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // IngameUI
    private readonly InputActionMap m_IngameUI;
    private List<IIngameUIActions> m_IngameUIActionsCallbackInterfaces = new List<IIngameUIActions>();
    private readonly InputAction m_IngameUI_Inventory;
    private readonly InputAction m_IngameUI_BuildingMenu;
    private readonly InputAction m_IngameUI_TalentMenu;
    private readonly InputAction m_IngameUI_RotateBuilding;
    private readonly InputAction m_IngameUI_PlaceBuilding;
    private readonly InputAction m_IngameUI_Escape;
    public struct IngameUIActions
    {
        private @InputActionMapPlayer m_Wrapper;
        public IngameUIActions(@InputActionMapPlayer wrapper) { m_Wrapper = wrapper; }
        public InputAction @Inventory => m_Wrapper.m_IngameUI_Inventory;
        public InputAction @BuildingMenu => m_Wrapper.m_IngameUI_BuildingMenu;
        public InputAction @TalentMenu => m_Wrapper.m_IngameUI_TalentMenu;
        public InputAction @RotateBuilding => m_Wrapper.m_IngameUI_RotateBuilding;
        public InputAction @PlaceBuilding => m_Wrapper.m_IngameUI_PlaceBuilding;
        public InputAction @Escape => m_Wrapper.m_IngameUI_Escape;
        public InputActionMap Get() { return m_Wrapper.m_IngameUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IngameUIActions set) { return set.Get(); }
        public void AddCallbacks(IIngameUIActions instance)
        {
            if (instance == null || m_Wrapper.m_IngameUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_IngameUIActionsCallbackInterfaces.Add(instance);
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
            @BuildingMenu.started += instance.OnBuildingMenu;
            @BuildingMenu.performed += instance.OnBuildingMenu;
            @BuildingMenu.canceled += instance.OnBuildingMenu;
            @TalentMenu.started += instance.OnTalentMenu;
            @TalentMenu.performed += instance.OnTalentMenu;
            @TalentMenu.canceled += instance.OnTalentMenu;
            @RotateBuilding.started += instance.OnRotateBuilding;
            @RotateBuilding.performed += instance.OnRotateBuilding;
            @RotateBuilding.canceled += instance.OnRotateBuilding;
            @PlaceBuilding.started += instance.OnPlaceBuilding;
            @PlaceBuilding.performed += instance.OnPlaceBuilding;
            @PlaceBuilding.canceled += instance.OnPlaceBuilding;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(IIngameUIActions instance)
        {
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
            @BuildingMenu.started -= instance.OnBuildingMenu;
            @BuildingMenu.performed -= instance.OnBuildingMenu;
            @BuildingMenu.canceled -= instance.OnBuildingMenu;
            @TalentMenu.started -= instance.OnTalentMenu;
            @TalentMenu.performed -= instance.OnTalentMenu;
            @TalentMenu.canceled -= instance.OnTalentMenu;
            @RotateBuilding.started -= instance.OnRotateBuilding;
            @RotateBuilding.performed -= instance.OnRotateBuilding;
            @RotateBuilding.canceled -= instance.OnRotateBuilding;
            @PlaceBuilding.started -= instance.OnPlaceBuilding;
            @PlaceBuilding.performed -= instance.OnPlaceBuilding;
            @PlaceBuilding.canceled -= instance.OnPlaceBuilding;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(IIngameUIActions instance)
        {
            if (m_Wrapper.m_IngameUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IIngameUIActions instance)
        {
            foreach (var item in m_Wrapper.m_IngameUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_IngameUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public IngameUIActions @IngameUI => new IngameUIActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_RotateCamera;
    private readonly InputAction m_Camera_MouseMovement;
    public struct CameraActions
    {
        private @InputActionMapPlayer m_Wrapper;
        public CameraActions(@InputActionMapPlayer wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateCamera => m_Wrapper.m_Camera_RotateCamera;
        public InputAction @MouseMovement => m_Wrapper.m_Camera_MouseMovement;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @RotateCamera.started += instance.OnRotateCamera;
            @RotateCamera.performed += instance.OnRotateCamera;
            @RotateCamera.canceled += instance.OnRotateCamera;
            @MouseMovement.started += instance.OnMouseMovement;
            @MouseMovement.performed += instance.OnMouseMovement;
            @MouseMovement.canceled += instance.OnMouseMovement;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @RotateCamera.started -= instance.OnRotateCamera;
            @RotateCamera.performed -= instance.OnRotateCamera;
            @RotateCamera.canceled -= instance.OnRotateCamera;
            @MouseMovement.started -= instance.OnMouseMovement;
            @MouseMovement.performed -= instance.OnMouseMovement;
            @MouseMovement.canceled -= instance.OnMouseMovement;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_UseSelectedItem;
    private readonly InputAction m_Player_AirStep;
    private readonly InputAction m_Player_Hotkey1;
    private readonly InputAction m_Player_Hotkey2;
    private readonly InputAction m_Player_Hotkey3;
    private readonly InputAction m_Player_Hotkey4;
    private readonly InputAction m_Player_Hotkey5;
    private readonly InputAction m_Player_Hotkey6;
    private readonly InputAction m_Player_Hotkey7;
    private readonly InputAction m_Player_Skill1;
    private readonly InputAction m_Player_Skill2;
    public struct PlayerActions
    {
        private @InputActionMapPlayer m_Wrapper;
        public PlayerActions(@InputActionMapPlayer wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @UseSelectedItem => m_Wrapper.m_Player_UseSelectedItem;
        public InputAction @AirStep => m_Wrapper.m_Player_AirStep;
        public InputAction @Hotkey1 => m_Wrapper.m_Player_Hotkey1;
        public InputAction @Hotkey2 => m_Wrapper.m_Player_Hotkey2;
        public InputAction @Hotkey3 => m_Wrapper.m_Player_Hotkey3;
        public InputAction @Hotkey4 => m_Wrapper.m_Player_Hotkey4;
        public InputAction @Hotkey5 => m_Wrapper.m_Player_Hotkey5;
        public InputAction @Hotkey6 => m_Wrapper.m_Player_Hotkey6;
        public InputAction @Hotkey7 => m_Wrapper.m_Player_Hotkey7;
        public InputAction @Skill1 => m_Wrapper.m_Player_Skill1;
        public InputAction @Skill2 => m_Wrapper.m_Player_Skill2;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @UseSelectedItem.started += instance.OnUseSelectedItem;
            @UseSelectedItem.performed += instance.OnUseSelectedItem;
            @UseSelectedItem.canceled += instance.OnUseSelectedItem;
            @AirStep.started += instance.OnAirStep;
            @AirStep.performed += instance.OnAirStep;
            @AirStep.canceled += instance.OnAirStep;
            @Hotkey1.started += instance.OnHotkey1;
            @Hotkey1.performed += instance.OnHotkey1;
            @Hotkey1.canceled += instance.OnHotkey1;
            @Hotkey2.started += instance.OnHotkey2;
            @Hotkey2.performed += instance.OnHotkey2;
            @Hotkey2.canceled += instance.OnHotkey2;
            @Hotkey3.started += instance.OnHotkey3;
            @Hotkey3.performed += instance.OnHotkey3;
            @Hotkey3.canceled += instance.OnHotkey3;
            @Hotkey4.started += instance.OnHotkey4;
            @Hotkey4.performed += instance.OnHotkey4;
            @Hotkey4.canceled += instance.OnHotkey4;
            @Hotkey5.started += instance.OnHotkey5;
            @Hotkey5.performed += instance.OnHotkey5;
            @Hotkey5.canceled += instance.OnHotkey5;
            @Hotkey6.started += instance.OnHotkey6;
            @Hotkey6.performed += instance.OnHotkey6;
            @Hotkey6.canceled += instance.OnHotkey6;
            @Hotkey7.started += instance.OnHotkey7;
            @Hotkey7.performed += instance.OnHotkey7;
            @Hotkey7.canceled += instance.OnHotkey7;
            @Skill1.started += instance.OnSkill1;
            @Skill1.performed += instance.OnSkill1;
            @Skill1.canceled += instance.OnSkill1;
            @Skill2.started += instance.OnSkill2;
            @Skill2.performed += instance.OnSkill2;
            @Skill2.canceled += instance.OnSkill2;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @UseSelectedItem.started -= instance.OnUseSelectedItem;
            @UseSelectedItem.performed -= instance.OnUseSelectedItem;
            @UseSelectedItem.canceled -= instance.OnUseSelectedItem;
            @AirStep.started -= instance.OnAirStep;
            @AirStep.performed -= instance.OnAirStep;
            @AirStep.canceled -= instance.OnAirStep;
            @Hotkey1.started -= instance.OnHotkey1;
            @Hotkey1.performed -= instance.OnHotkey1;
            @Hotkey1.canceled -= instance.OnHotkey1;
            @Hotkey2.started -= instance.OnHotkey2;
            @Hotkey2.performed -= instance.OnHotkey2;
            @Hotkey2.canceled -= instance.OnHotkey2;
            @Hotkey3.started -= instance.OnHotkey3;
            @Hotkey3.performed -= instance.OnHotkey3;
            @Hotkey3.canceled -= instance.OnHotkey3;
            @Hotkey4.started -= instance.OnHotkey4;
            @Hotkey4.performed -= instance.OnHotkey4;
            @Hotkey4.canceled -= instance.OnHotkey4;
            @Hotkey5.started -= instance.OnHotkey5;
            @Hotkey5.performed -= instance.OnHotkey5;
            @Hotkey5.canceled -= instance.OnHotkey5;
            @Hotkey6.started -= instance.OnHotkey6;
            @Hotkey6.performed -= instance.OnHotkey6;
            @Hotkey6.canceled -= instance.OnHotkey6;
            @Hotkey7.started -= instance.OnHotkey7;
            @Hotkey7.performed -= instance.OnHotkey7;
            @Hotkey7.canceled -= instance.OnHotkey7;
            @Skill1.started -= instance.OnSkill1;
            @Skill1.performed -= instance.OnSkill1;
            @Skill1.canceled -= instance.OnSkill1;
            @Skill2.started -= instance.OnSkill2;
            @Skill2.performed -= instance.OnSkill2;
            @Skill2.canceled -= instance.OnSkill2;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Debug
    private readonly InputActionMap m_Debug;
    private List<IDebugActions> m_DebugActionsCallbackInterfaces = new List<IDebugActions>();
    private readonly InputAction m_Debug_PrintStackToConsole;
    public struct DebugActions
    {
        private @InputActionMapPlayer m_Wrapper;
        public DebugActions(@InputActionMapPlayer wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrintStackToConsole => m_Wrapper.m_Debug_PrintStackToConsole;
        public InputActionMap Get() { return m_Wrapper.m_Debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void AddCallbacks(IDebugActions instance)
        {
            if (instance == null || m_Wrapper.m_DebugActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebugActionsCallbackInterfaces.Add(instance);
            @PrintStackToConsole.started += instance.OnPrintStackToConsole;
            @PrintStackToConsole.performed += instance.OnPrintStackToConsole;
            @PrintStackToConsole.canceled += instance.OnPrintStackToConsole;
        }

        private void UnregisterCallbacks(IDebugActions instance)
        {
            @PrintStackToConsole.started -= instance.OnPrintStackToConsole;
            @PrintStackToConsole.performed -= instance.OnPrintStackToConsole;
            @PrintStackToConsole.canceled -= instance.OnPrintStackToConsole;
        }

        public void RemoveCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebugActions instance)
        {
            foreach (var item in m_Wrapper.m_DebugActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebugActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebugActions @Debug => new DebugActions(this);
    public interface IIngameUIActions
    {
        void OnInventory(InputAction.CallbackContext context);
        void OnBuildingMenu(InputAction.CallbackContext context);
        void OnTalentMenu(InputAction.CallbackContext context);
        void OnRotateBuilding(InputAction.CallbackContext context);
        void OnPlaceBuilding(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnRotateCamera(InputAction.CallbackContext context);
        void OnMouseMovement(InputAction.CallbackContext context);
    }
    public interface IPlayerActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnUseSelectedItem(InputAction.CallbackContext context);
        void OnAirStep(InputAction.CallbackContext context);
        void OnHotkey1(InputAction.CallbackContext context);
        void OnHotkey2(InputAction.CallbackContext context);
        void OnHotkey3(InputAction.CallbackContext context);
        void OnHotkey4(InputAction.CallbackContext context);
        void OnHotkey5(InputAction.CallbackContext context);
        void OnHotkey6(InputAction.CallbackContext context);
        void OnHotkey7(InputAction.CallbackContext context);
        void OnSkill1(InputAction.CallbackContext context);
        void OnSkill2(InputAction.CallbackContext context);
    }
    public interface IDebugActions
    {
        void OnPrintStackToConsole(InputAction.CallbackContext context);
    }
}
